
import requests
from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging
from states import RegistrationStates, LoginStates, TourStates, AddCardStates, ResetPasswordStates

API_URL = "http://127.0.0.1:8000/"

router = Router()

logging.basicConfig(level=logging.INFO)


async def is_authenticated(state: FSMContext):
    user_data = await state.get_data()
    return "access_token" in user_data


def handle_api_error(response):
    if response.status_code != 200:
        logging.error(f"API Error {response.status_code}: {response.text}")
        return False
    return True


def start_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
        [InlineKeyboardButton(text="üîë –õ–æ–≥–∏–Ω", callback_data="login")],
        [InlineKeyboardButton(text="–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="forgot_password")]
    ])


@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ: \n\n"
        "1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \n"
        "2Ô∏è‚É£ –õ–æ–≥–∏–Ω",
        reply_markup=start_menu_keyboard()
    )


@router.callback_query(lambda c: c.data == "register")
async def registration_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(RegistrationStates.waiting_for_username)
    await callback.answer()


@router.message(StateFilter(RegistrationStates.waiting_for_username))
async def process_username(message: types.Message, state: FSMContext):
    username = message.text
    await state.update_data(username=username)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π email.")
    await state.set_state(RegistrationStates.waiting_for_email)


@router.message(StateFilter(RegistrationStates.waiting_for_email))
async def process_email(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.")
    await state.set_state(RegistrationStates.waiting_for_password)


@router.message(StateFilter(RegistrationStates.waiting_for_password))
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    username = user_data["username"]
    email = user_data["email"]

    response = requests.post(f'{API_URL}avtorizate/users/register/', json={
        "username": username,
        "email": email,
        "password": password
    })

    if response.status_code == 201:
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.")
        await state.set_state(RegistrationStates.awaiting_code)
    else:
        error_message = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if response.status_code == 400:
            error_message = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        await message.answer(error_message)
        await state.set_state(RegistrationStates.waiting_for_username)


"-----------------------------------------------------------------------------------------------------------------"



@router.callback_query(lambda c: c.data == "forgot_password")
async def forgot_password_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:")
    await state.set_state(ResetPasswordStates.waiting_for_email)
    await callback.answer()

@router.message(StateFilter(ResetPasswordStates.waiting_for_email))
async def process_forgot_password_email(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)

    response = requests.post(f'{API_URL}avtorizate/reset-password-request/', json={"email": email})
    if response.status_code == 200:
        await message.answer("–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
        await state.set_state(ResetPasswordStates.waiting_for_code)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
@router.message(StateFilter(ResetPasswordStates.waiting_for_code))
async def process_forgot_password_code(message: types.Message, state: FSMContext):
    code = message.text
    await state.update_data(code=code)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(ResetPasswordStates.waiting_for_new_password)
@router.message(StateFilter(ResetPasswordStates.waiting_for_new_password))
async def process_new_password(message: types.Message, state: FSMContext):
    new_password = message.text
    user_data = await state.get_data()

    response = requests.post(f'{API_URL}avtorizate/reset-password-confirm/', json={
        "email": user_data["email"],
        "code": user_data["code"],
        "new_password": new_password
    })

    if response.status_code == 200:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

"------------------------------------------------------------------------------------------------------------"


@router.callback_query(lambda c: c.data == "login")
async def login_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üîë –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –¥–ª—è –ª–æ–≥–∏–Ω–∞:")
    await state.set_state(LoginStates.waiting_for_username)
    await callback.answer()


@router.message(StateFilter(LoginStates.waiting_for_username))
async def process_login_username(message: types.Message, state: FSMContext):
    username = message.text
    await state.update_data(username=username)
    await message.answer("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.")
    await state.set_state(LoginStates.waiting_for_password)


@router.message(StateFilter(LoginStates.waiting_for_password))
async def process_login_password(message: types.Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    username = user_data["username"]

    response = requests.post(f'{API_URL}avtorizate/users/login/', json={
        "username": username,
        "password": password
    })

    if handle_api_error(response):
        tokens = response.json()
        await state.update_data(access_token=tokens["access"], refresh_token=tokens["refresh"])
        await message.answer_sticker(sticker='CAACAgIAAxkBAAErxtBnLNOLeYgPGPam9T1EOoOvrJctBAAC4mAAAiQnaEmHEUXkVbbpGjYE')

        await message.answer(
            "‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
            reply_markup=await user_main_menu(state)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(Command("menu"))
async def show_main_menu(message: types.Message, state: FSMContext):
    keyboard = await user_main_menu(state)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=keyboard)


async def get_user_card_data(user_data):
    tokens = user_data.get("access_token")
    if not tokens:
        return None

    headers = {
        "Authorization": f"Bearer {tokens}"
    }
    response = requests.get(f"{API_URL}cards/cards", headers=headers)

    if response.status_code == 200:
        return response.json()
    return None


async def user_main_menu(state: FSMContext):
    user_data = await state.get_data()
    user_card = await get_user_card_data(user_data)

    if user_card:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –¢—É—Ä—ã", callback_data="tours")],
            [InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_bookings")],
            [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
            [InlineKeyboardButton(text="üí≥ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∫–∞—Ä—Ç—É", callback_data="view_card")],
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –¢—É—Ä—ã", callback_data="tours")],
            [InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_bookings")],
            [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
            [InlineKeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="add_card")]
        ])


@router.callback_query(lambda c: c.data == "add_card")
async def add_card_start(callback: types.CallbackQuery, state: FSMContext):
    if await is_authenticated(state):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:")
        await state.set_state(AddCardStates.waiting_for_card_number)
        await callback.answer()
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")


@router.message(StateFilter(AddCardStates.waiting_for_card_number))
async def process_card_number(message: types.Message, state: FSMContext):
    card_number = message.text
    await state.update_data(card_number=card_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Ä—Ç—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ MM/YY):")
    await state.set_state(AddCardStates.waiting_for_card_expiry)


@router.message(StateFilter(AddCardStates.waiting_for_card_expiry))
async def process_card_expiry(message: types.Message, state: FSMContext):
    card_expiry = message.text
    await state.update_data(card_expiry=card_expiry)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã:")
    await state.set_state(AddCardStates.waiting_for_card_holder)


@router.message(StateFilter(AddCardStates.waiting_for_card_holder))
async def process_card_holder(message: types.Message, state: FSMContext):
    card_holder = message.text
    user_data = await state.get_data()

    data = {
        "card_num": user_data["card_number"],
        "mm_yy": user_data["card_expiry"],
        "card_holder": card_holder
    }

    tokens = user_data.get("access_token")
    if not tokens:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
        return

    headers = {
        "Authorization": f"Bearer {tokens}"
    }

    response = requests.post(f"{API_URL}cards/cards/", json=data, headers=headers)

    if response.status_code == 201:
        card_info = response.json()
        await message.answer(f"‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                             f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_info['card_num']}\n"
                             f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {card_info['mm_yy']}\n"
                             f"–ë–∞–ª–∞–Ω—Å: {card_info['balance']}")

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        view_card_button = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∫–∞—Ä—Ç—É", callback_data="view_card")
        keyboard.add(view_card_button)

        await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É.", reply_markup=keyboard)

    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data == "view_card")
async def view_card(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    tokens = user_data.get("access_token")

    if not tokens:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
        await callback.answer()
        return

    headers = {
        "Authorization": f"Bearer {tokens}"
    }

    response = requests.get(f"{API_URL}cards/cards/", headers=headers)

    if response.status_code == 200:
        user_card = response.json()

        if isinstance(user_card, list) and len(user_card) > 0:
            user_card = user_card[0]

        if user_card:
            card_num = user_card.get("card_num", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            mm_yy = user_card.get("mm_yy", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            balance = user_card.get("balance", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            await callback.message.answer(
                f"üí≥ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_num}\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {mm_yy}\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance} $"

            )
        else:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç—É.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await callback.answer()


@router.callback_query(lambda c: c.data == "tours")
async def get_tours(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "access_token" not in user_data:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        await state.set_state(LoginStates.waiting_for_username)
        return
    response = requests.get(f"{API_URL}tours/tours/", headers={"Authorization": f"Bearer {user_data['access_token']}"})

    if handle_api_error(response):
        tours = response.json()
        buttons = [
            InlineKeyboardButton(text=f"{tour['name']} - {tour['hotel']}", callback_data=f"tour_{tour['id']}")
            for tour in tours
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await callback.message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä:", reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("tour_"))
async def show_tour_info(callback: types.CallbackQuery, state: FSMContext):
    tour_id = int(callback.data.split("_")[1])
    response = requests.get(f"{API_URL}tours/tours/{tour_id}/")

    if handle_api_error(response):

        tour = response.json()
        details = f"üó∫Ô∏è –¢—É—Ä: {tour['name']}\nüè® –û—Ç–µ–ª—å: {tour['hotel']}"
        booking_button = InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{tour_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[booking_button]])
        photo_url = tour.get('photo_url')
        if photo_url:
            await callback.message.answer_photo(photo_url)
        else:
            await callback.message.answer('–¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å —Ñ–æ—Ç–∫–∞')
        await callback.message.answer(details, reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ.")




@router.callback_query(lambda c: c.data.startswith("book_"))
async def handle_booking(callback: types.CallbackQuery, state: FSMContext):
    tour_id = int(callback.data.split("_")[1])
    await state.update_data(selected_tour=tour_id)
    await callback.message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:")
    await state.set_state(TourStates.waiting_for_child_count)
    await callback.answer()



@router.message(TourStates.waiting_for_child_count)
async def enter_child_count(message: types.Message, state: FSMContext):
    if message.text.isdigit() or message.text == "":
        await state.update_data(child_count=message.text)
        await message.answer("üë®‚Äçüë©‚Äçüëß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:")
        await state.set_state(TourStates.waiting_for_adult_count)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.message(TourStates.waiting_for_adult_count)
async def enter_adult_count(message: types.Message, state: FSMContext):
    if message.text.isdigit() or message.text == "":
        await state.update_data(adult_count=message.text)
        await message.answer("üë¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π:")
        await state.set_state(TourStates.waiting_for_senior_count)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(TourStates.waiting_for_senior_count)
async def enter_senior_count(message: types.Message, state: FSMContext):
    if message.text.isdigit() or message.text == "":
        await state.update_data(senior_count=message.text)
        user_data = await state.get_data()
        booking_people = []

        if int(user_data["child_count"]) > 0:
            booking_people.append({"person": "child", "count": int(user_data["child_count"])})
        if int(user_data["adult_count"]) > 0:
            booking_people.append({"person": "adult", "count": int(user_data["adult_count"])})
        if int(user_data["senior_count"]) > 0:
            booking_people.append({"person": "senior", "count": int(user_data["senior_count"])})

        data = {
            "tour": user_data["selected_tour"],
            "booking_people": booking_people
        }

        tokens = user_data.get("access_token")
        if not tokens:
            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
            return

        headers = {
            "Authorization": f"Bearer {tokens}"
        }

        response = requests.post(f"{API_URL}tours/booking/", json=data, headers=headers)

        logging.info(f"Booking response: {response.status_code} - {response.text}")

        if response.status_code == 201:
            booking_info = response.json()
            booking_details = (
                f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
                f"ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking_info['id']}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {booking_info['user']}\n"
                f"–¢—É—Ä: {booking_info['tour']}\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {booking_info['total_price']}\n\n"
                f"–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            )
            for person in booking_info['booking_people']:
                booking_details += f"{person['person'].capitalize()}: {person['count']}\n"

            await message.answer(booking_details)
        else:
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            if response.status_code == 400:
                error_message = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            elif response.status_code == 401:
                error_message = "‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω."
            logging.error(f"Booking error: {response.status_code} - {response.text}")
            await message.answer(error_message)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")


@router.callback_query(lambda c: c.data.startswith("book_"))
async def handle_booking(callback: types.CallbackQuery, state: FSMContext):
    tour_id = int(callback.data.split("_")[1])
    await state.update_data(selected_tour=tour_id)
    await callback.message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:")
    await state.set_state(TourStates.waiting_for_child_count)
    await callback.answer()


@router.callback_query(lambda c: c.data == "my_bookings")
async def my_bookings(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    access_token = user_data.get("access_token")

    if not access_token:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
        return

    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(f"{API_URL}tours/tours/booking/list", headers=headers)

    if response.status_code == 200:
        bookings = response.json()
        if bookings:
            for booking in bookings:
                booking_id = booking['id']
                tour_name = booking['tour']
                total_price = booking['total_price']
                booking_people = booking["booking_people"]
                is_paid = booking.get('is_paid', False)

                people_details = "\n".join(
                    [f"{person['person'].capitalize()}: {person['count']}" for person in booking_people]
                )

                booking_details = (
                    f"üóìÔ∏è –ó–∞–∫–∞–∑ ID: {booking_id}\n"
                    f"üèñÔ∏è –¢—É—Ä: {tour_name}\n"
                    f"üë• –ö–æ–ª-–≤–æ –ª—é–¥–µ–π:\n{people_details}\n"
                    f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} $\n"
                    f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if is_paid else '–ù–µ—Ç'}\n"
                )
                if not is_paid:
                    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{booking_id}")
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[pay_button]])
                    await callback.message.answer(booking_details, reply_markup=keyboard)
                else:
                    await callback.message.answer(booking_details)
        else:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("pay_"))
async def handle_payment(callback: types.CallbackQuery, state: FSMContext):
    booking_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    tokens = user_data.get("access_token")

    if not tokens:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
        return

    headers = {
        "Authorization": f"Bearer {tokens}"
    }

    response = requests.get(f"{API_URL}tours/tours/booking/{booking_id}/", headers=headers)
    if response.status_code != 200:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        return

    booking_info = response.json()

    if booking_info.get("is_paid"):
        await callback.message.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await callback.answer()
        return

    response = requests.get(f"{API_URL}cards/cards/", headers=headers)
    if response.status_code != 200:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cards = response.json()
    if not cards:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    card_id = cards[0]['id']
    payment_data = {
        "booking_id": booking_id,
        "card_id": card_id
    }

    response = requests.post(f"{API_URL}avtorizate/pay/", json=payment_data, headers=headers)

    if response.status_code == 200:
        await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ID: {booking_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")
        await my_bookings(callback, state)
    elif response.status_code == 400:
        error_message = response.json().get("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ")
        if "–æ–ø–ª–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞" in error_message.lower():
            error_message = "‚ùå –û–ø–ª–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞."
        await callback.message.answer(error_message)
    elif response.status_code == 401:
        await callback.message.answer("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
    elif response.status_code == 404:
        await callback.message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await callback.answer()






async def get_user_profile(access_token: str):
    try:
        url = f"{API_URL}avtorizate/users/me/"
        headers = {"Authorization": f"Bearer {access_token}"}
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None

@router.callback_query(lambda c: c.data == "my_profile")
async def my_profile(callback: types.CallbackQuery, state: FSMContext):
    if await is_authenticated(state):
        user_data = await state.get_data()
        access_token = user_data.get("access_token")
        response = requests.get(f"{API_URL}avtorizate/users/me/", headers={"Authorization": f"Bearer {access_token}"})

        if response.status_code == 200:
            user_info = response.json()
            profile_info = (
                f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('username')}\n"
                f"üìß Email: {user_info.get('email')}\n"
            )
            await callback.message.answer(profile_info)
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.")
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")

    await callback.answer()








@router.callback_query(lambda c: c.data == "history")
async def view_transaction_history(callback: types.CallbackQuery, state: FSMContext):
    if await is_authenticated(state):
        user_data = await state.get_data()
        access_token = user_data.get("access_token")

        if not access_token:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
            return

        headers = {"Authorization": f"Bearer {access_token}"}
        response = requests.get(f"{API_URL}cards/transactions/", headers=headers)

        if response.status_code == 200:
            transactions = response.json()
            if transactions:
                history_details = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
                for transaction in transactions:
                    transaction_date = transaction.get("datetime", "?").split("T")[0]
                    transaction_amount = transaction.get("value", "?")
                    history_details += (
                        f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {transaction.get('from_card', '?')}\n"
                        f"üóì –î–∞—Ç–∞: {transaction_date}\n"
                        f"üí∞ –°—É–º–º–∞: {transaction_amount}‚ÇΩ\n"
                        f"------------------------\n"
                    )
                await callback.message.answer(history_details)
            else:
                await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω.")
